// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=./mock_service.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	entity "github.com/MaxFando/application-design/internal/core/order/entity"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(ctx context.Context, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), ctx, order)
}

// MockAvailabilityChecker is a mock of AvailabilityChecker interface.
type MockAvailabilityChecker struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityCheckerMockRecorder
}

// MockAvailabilityCheckerMockRecorder is the mock recorder for MockAvailabilityChecker.
type MockAvailabilityCheckerMockRecorder struct {
	mock *MockAvailabilityChecker
}

// NewMockAvailabilityChecker creates a new mock instance.
func NewMockAvailabilityChecker(ctrl *gomock.Controller) *MockAvailabilityChecker {
	mock := &MockAvailabilityChecker{ctrl: ctrl}
	mock.recorder = &MockAvailabilityCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityChecker) EXPECT() *MockAvailabilityCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockAvailabilityChecker) Check(ctx context.Context, daysToBook []time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, daysToBook)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockAvailabilityCheckerMockRecorder) Check(ctx, daysToBook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAvailabilityChecker)(nil).Check), ctx, daysToBook)
}
