// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go
//
// Generated by this command:
//
//	mockgen -source=ports.go -destination=./mock_service_ports.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	entity "github.com/MaxFando/application-design/internal/core/hotel/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAvailabilityInitializerFetcherRepository is a mock of AvailabilityInitializerFetcherRepository interface.
type MockAvailabilityInitializerFetcherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityInitializerFetcherRepositoryMockRecorder
}

// MockAvailabilityInitializerFetcherRepositoryMockRecorder is the mock recorder for MockAvailabilityInitializerFetcherRepository.
type MockAvailabilityInitializerFetcherRepositoryMockRecorder struct {
	mock *MockAvailabilityInitializerFetcherRepository
}

// NewMockAvailabilityInitializerFetcherRepository creates a new mock instance.
func NewMockAvailabilityInitializerFetcherRepository(ctrl *gomock.Controller) *MockAvailabilityInitializerFetcherRepository {
	mock := &MockAvailabilityInitializerFetcherRepository{ctrl: ctrl}
	mock.recorder = &MockAvailabilityInitializerFetcherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityInitializerFetcherRepository) EXPECT() *MockAvailabilityInitializerFetcherRepositoryMockRecorder {
	return m.recorder
}

// MockAvailabilityInitializerWriterRepository is a mock of AvailabilityInitializerWriterRepository interface.
type MockAvailabilityInitializerWriterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityInitializerWriterRepositoryMockRecorder
}

// MockAvailabilityInitializerWriterRepositoryMockRecorder is the mock recorder for MockAvailabilityInitializerWriterRepository.
type MockAvailabilityInitializerWriterRepositoryMockRecorder struct {
	mock *MockAvailabilityInitializerWriterRepository
}

// NewMockAvailabilityInitializerWriterRepository creates a new mock instance.
func NewMockAvailabilityInitializerWriterRepository(ctrl *gomock.Controller) *MockAvailabilityInitializerWriterRepository {
	mock := &MockAvailabilityInitializerWriterRepository{ctrl: ctrl}
	mock.recorder = &MockAvailabilityInitializerWriterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityInitializerWriterRepository) EXPECT() *MockAvailabilityInitializerWriterRepositoryMockRecorder {
	return m.recorder
}

// InitializeAvailability mocks base method.
func (m *MockAvailabilityInitializerWriterRepository) InitializeAvailability(ctx context.Context, availability []entity.RoomAvailability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeAvailability", ctx, availability)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeAvailability indicates an expected call of InitializeAvailability.
func (mr *MockAvailabilityInitializerWriterRepositoryMockRecorder) InitializeAvailability(ctx, availability any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAvailability", reflect.TypeOf((*MockAvailabilityInitializerWriterRepository)(nil).InitializeAvailability), ctx, availability)
}

// MockAvailabilityRepository is a mock of AvailabilityRepository interface.
type MockAvailabilityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityRepositoryMockRecorder
}

// MockAvailabilityRepositoryMockRecorder is the mock recorder for MockAvailabilityRepository.
type MockAvailabilityRepositoryMockRecorder struct {
	mock *MockAvailabilityRepository
}

// NewMockAvailabilityRepository creates a new mock instance.
func NewMockAvailabilityRepository(ctrl *gomock.Controller) *MockAvailabilityRepository {
	mock := &MockAvailabilityRepository{ctrl: ctrl}
	mock.recorder = &MockAvailabilityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityRepository) EXPECT() *MockAvailabilityRepositoryMockRecorder {
	return m.recorder
}

// GetAvailability mocks base method.
func (m *MockAvailabilityRepository) GetAvailability(ctx context.Context) ([]entity.RoomAvailability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailability", ctx)
	ret0, _ := ret[0].([]entity.RoomAvailability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailability indicates an expected call of GetAvailability.
func (mr *MockAvailabilityRepositoryMockRecorder) GetAvailability(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailability", reflect.TypeOf((*MockAvailabilityRepository)(nil).GetAvailability), ctx)
}

// UpdateAvailability mocks base method.
func (m *MockAvailabilityRepository) UpdateAvailability(ctx context.Context, idx int, availability entity.RoomAvailability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvailability", ctx, idx, availability)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvailability indicates an expected call of UpdateAvailability.
func (mr *MockAvailabilityRepositoryMockRecorder) UpdateAvailability(ctx, idx, availability any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvailability", reflect.TypeOf((*MockAvailabilityRepository)(nil).UpdateAvailability), ctx, idx, availability)
}
