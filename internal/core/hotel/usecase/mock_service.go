// Code generated by MockGen. DO NOT EDIT.
// Source: availability_usecase.go
//
// Generated by this command:
//
//	mockgen -source=availability_usecase.go -destination=./mock_service.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	entity "github.com/MaxFando/application-design/internal/core/hotel/entity"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAvailabilityServiceInterface is a mock of AvailabilityServiceInterface interface.
type MockAvailabilityServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityServiceInterfaceMockRecorder
}

// MockAvailabilityServiceInterfaceMockRecorder is the mock recorder for MockAvailabilityServiceInterface.
type MockAvailabilityServiceInterfaceMockRecorder struct {
	mock *MockAvailabilityServiceInterface
}

// NewMockAvailabilityServiceInterface creates a new mock instance.
func NewMockAvailabilityServiceInterface(ctrl *gomock.Controller) *MockAvailabilityServiceInterface {
	mock := &MockAvailabilityServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAvailabilityServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityServiceInterface) EXPECT() *MockAvailabilityServiceInterfaceMockRecorder {
	return m.recorder
}

// ComputeUnavailableDays mocks base method.
func (m *MockAvailabilityServiceInterface) ComputeUnavailableDays(ctx context.Context, daysToBook []time.Time) (entity.UnavailableDays, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeUnavailableDays", ctx, daysToBook)
	ret0, _ := ret[0].(entity.UnavailableDays)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeUnavailableDays indicates an expected call of ComputeUnavailableDays.
func (mr *MockAvailabilityServiceInterfaceMockRecorder) ComputeUnavailableDays(ctx, daysToBook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeUnavailableDays", reflect.TypeOf((*MockAvailabilityServiceInterface)(nil).ComputeUnavailableDays), ctx, daysToBook)
}
